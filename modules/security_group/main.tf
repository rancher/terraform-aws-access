locals {
  name      = var.name
  use       = var.use
  select    = (local.use == "select" ? 1 : 0)
  create    = (local.use == "create" ? 1 : 0)
  type_name = var.type
  type      = (local.types[var.type])
  vpc_id    = var.vpc_id
  vpc_cidr  = var.vpc_cidr
}

data "aws_security_group" "selected" {
  count = local.select
  filter {
    name   = "tag:Name"
    values = [local.name]
  }
}

resource "aws_security_group" "new" {
  count       = local.create
  description = "access to ${local.type_name} generated by aws_access module"
  name        = local.name
  vpc_id      = local.vpc_id
  tags = {
    Name = local.name
  }
  lifecycle {
    ignore_changes = [
      ingress,
      egress,
    ]
  }
}

# this allows egress between servers on the VPC
resource "aws_vpc_security_group_egress_rule" "project_egress" {
  count             = (local.type.project_egress ? 1 : 0)
  ip_protocol       = "-1"
  cidr_ipv4         = local.vpc_cidr
  security_group_id = aws_security_group.new[0].id
}
# this allows ingress between servers on the VPC
resource "aws_vpc_security_group_ingress_rule" "project_ingress" {
  count             = (local.type.project_ingress ? 1 : 0)
  ip_protocol       = "-1"
  cidr_ipv4         = local.vpc_cidr
  security_group_id = aws_security_group.new[0].id
}

# this is necessary if you want to update or install anything from the internet
# allows servers to initiate connections to the public internet
resource "aws_vpc_security_group_egress_rule" "external_egress" {
  count             = (local.type.public_egress ? 1 : 0)
  ip_protocol       = "-1"
  cidr_ipv4         = "0.0.0.0/0"
  security_group_id = aws_security_group.new[0].id
}

# allows the public internet to initiate connections to the server
# WARNING! this exposes your entire project to the public internet
resource "aws_vpc_security_group_ingress_rule" "external_ingress" {
  count             = (local.type.public_ingress ? 1 : 0)
  ip_protocol       = "-1"
  cidr_ipv4         = "0.0.0.0/0"
  security_group_id = aws_security_group.new[0].id
}
