name: validate

on:
  pull_request:
    branches: main

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_OWNER: ${{ github.repository_owner }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: matttrach/nix-installer-action@main
      - name: lint terraform
        shell: nix develop --ignore-environment --extra-experimental-features nix-command --extra-experimental-features flakes --keep HOME --keep SSH_AUTH_SOCK --keep GITHUB_TOKEN --keep AWS_ROLE --keep AWS_REGION --keep AWS_DEFAULT_REGION --keep AWS_ACCESS_KEY_ID --keep AWS_SECRET_ACCESS_KEY --keep AWS_SESSION_TOKEN --keep UPDATECLI_GPGTOKEN --keep UPDATECLI_GITHUB_TOKEN --keep UPDATECLI_GITHUB_ACTOR --keep GPG_SIGNING_KEY --keep NIX_ENV_LOADED --keep TERM --command bash -e {0}
        run: |
          terraform fmt -check -recursive
          tflint --recursive

  actionlint:
    name: 'Lint Workflows'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: matttrach/nix-installer-action@main
      - name: action lint
        shell: nix develop --ignore-environment --extra-experimental-features nix-command --extra-experimental-features flakes --keep HOME --keep SSH_AUTH_SOCK --keep GITHUB_TOKEN --keep AWS_ROLE --keep AWS_REGION --keep AWS_DEFAULT_REGION --keep AWS_ACCESS_KEY_ID --keep AWS_SECRET_ACCESS_KEY --keep AWS_SESSION_TOKEN --keep UPDATECLI_GPGTOKEN --keep UPDATECLI_GITHUB_TOKEN --keep UPDATECLI_GITHUB_ACTOR --keep GPG_SIGNING_KEY --keep NIX_ENV_LOADED --keep TERM --command bash -e {0}
        run: actionlint

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: matttrach/nix-installer-action@main
      - name: shell check
        shell: nix develop --ignore-environment --extra-experimental-features nix-command --extra-experimental-features flakes --keep HOME --keep SSH_AUTH_SOCK --keep GITHUB_TOKEN --keep AWS_ROLE --keep AWS_REGION --keep AWS_DEFAULT_REGION --keep AWS_ACCESS_KEY_ID --keep AWS_SECRET_ACCESS_KEY --keep AWS_SESSION_TOKEN --keep UPDATECLI_GPGTOKEN --keep UPDATECLI_GITHUB_TOKEN --keep UPDATECLI_GITHUB_ACTOR --keep GPG_SIGNING_KEY --keep NIX_ENV_LOADED --keep TERM --command bash -e {0}
        run: |
          while read -r file; do
            echo "checking $file..."
            shellcheck -x "$file"
          done <<<"$(grep -Rl -e '^#!' | grep -v '.terraform'| grep -v '.git')"

  validate-commit-message:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history so that we can validate the commit messages
      - uses: matttrach/nix-installer-action@main
      - name: Check commit message
        shell: nix develop --ignore-environment --extra-experimental-features nix-command --extra-experimental-features flakes --keep HOME --keep SSH_AUTH_SOCK --keep GITHUB_TOKEN --keep AWS_ROLE --keep AWS_REGION --keep AWS_DEFAULT_REGION --keep AWS_ACCESS_KEY_ID --keep AWS_SECRET_ACCESS_KEY --keep AWS_SESSION_TOKEN --keep UPDATECLI_GPGTOKEN --keep UPDATECLI_GITHUB_TOKEN --keep UPDATECLI_GITHUB_ACTOR --keep GPG_SIGNING_KEY --keep NIX_ENV_LOADED --keep TERM --command bash -e {0}
        run: |
          # Check commit messages
          # This steps enforces https://www.conventionalcommits.org/en/v1.0.0/
          # This format enables automatic generation of changelogs and versioning
          filter() {
            COMMIT="$1"
            ouput="$(echo "$COMMIT" | grep -e '^fix: ' -e '^feature: ' -e '^feat: ' -e 'refactor!: ' -e 'feature!: ' -e 'feat!: ' -e '^chore(main): ')"
            return "$output"
          }

          # Fetch the commit messages

          COMMIT_MESSAGES="$(gh pr view ${{github.event.number}} --json commits | jq -r '.commits[].messageHeadline')"
          echo "Commit messages found: "
          echo "$COMMIT_MESSAGES"

          while read -r message; do
            echo "Checking commit message: $message"
            if [ "" != "$(filter "$message")" ]; then
              echo "Commit message does not start with the required prefix.
              Please use one of the following prefixes: fix:, feature:, feat:, refactor!:, feature!:, feat:!.
              'chore(main): ' is also allowed for release PRs.
              This enables release-please to automatically determine the type of release (major, minor, patch) based on the commit message."
              exit 1
            else
              echo "Commit message starts with the required prefix."
            fi
          done <<<"$COMMIT_MESSAGES"

          # Check if any commit message is empty
          while read -r message; do
            echo "Checking commit message: $message"
            if [ "" == "$message" ]; then
              echo "Found empty commit message."
              exit 1
            else
              echo "Commit message is not empty."
            fi
          done <<<"$COMMIT_MESSAGES"

          # Check if any commit message subject line is longer than 50 characters
          while read -r message; do
            echo "Checking commit message: $message"
            if [ "$(wc -m <<<"$message")" -gt 50 ]; then
              echo "Commit message subject line should be less than 50 characters."
              exit 1
            else
              echo "Commit message subject line is less than 50 characters."
            fi
          done <<<"$COMMIT_MESSAGES"

          # Spell check the commit messages using aspell
          while read -r message; do
            echo "Checking commit message: $message"
            if [ "" != "$(echo "$message" | aspell list)" ]; then
              echo "Commit messages contain spelling errors on words $WORDS."
              echo "Also try updating the PR title not just amending the commits."
              exit 1
            else
              echo "Commit messages do not contain spelling errors."
            fi
          done <<<"$COMMIT_MESSAGES"

  gitleaks:
    name: 'Scan for Secrets'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: matttrach/nix-installer-action@main
    - name: Check for secrets
      shell: nix develop --ignore-environment --extra-experimental-features nix-command --extra-experimental-features flakes --keep HOME --keep SSH_AUTH_SOCK --keep GITHUB_TOKEN --keep AWS_ROLE --keep AWS_REGION --keep AWS_DEFAULT_REGION --keep AWS_ACCESS_KEY_ID --keep AWS_SECRET_ACCESS_KEY --keep AWS_SESSION_TOKEN --keep UPDATECLI_GPGTOKEN --keep UPDATECLI_GITHUB_TOKEN --keep UPDATECLI_GITHUB_ACTOR --keep GPG_SIGNING_KEY --keep NIX_ENV_LOADED --keep TERM --command bash -e {0}
      run: |
        gitleaks detect --no-banner -v --no-git
        gitleaks detect --no-banner -v
